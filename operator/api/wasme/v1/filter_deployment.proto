syntax = "proto3";

package wasme.io;

option go_package = "github.com/solo-io/wasme/pkg/operator/api/wasme.io/v1";

// A FilterDeployment tells the Wasme Operator
// to deploy a filter with the provided configuration
// to the target workloads.
// Currently FilterDeployments support Wasm filters on Istio
message FilterDeploymentSpec {
    // the spec of the filter to deploy
    FilterSpec filter = 1;

    // Spec that selects one or more target workloads in the FilterDeployment namespace
    DeploymentSpec deployment = 2;
}

// the filter to deploy
message FilterSpec {
    // unique identifier that will be used
    // to remove the filter as well as for logging.
    // if id is not set, it will be set automatically to be the name.namespace
    // of the FilterDeployment resource
    string id = 1;

    // name of image which houses the compiled wasm filter
    string image = 2;

    // string of the config sent to the wasm filter
    // Currently has to be json or will crash
    string config = 3;

    // the root id must match the root id
    // defined inside the filter.
    // if the user does not provide this field,
    // wasme will attempt to pull the image
    // and set it from the filter_conf
    // the first time it must pull the image and inspect it
    // second time it will cache it locally
    // if the user provides
    string rootID = 4;

    // custom options if pulling from private / custom repositories
    ImagePullOptions imagePullOptions = 5;
}


message ImagePullOptions {
    // if a username/password is required,
    // specify here the name of a secret:
    // with keys:
    // * username: <username>
    // * password: <password>
    //
    // the secret must live in the same namespace
    // as the FilterDeployment
    string pullSecret = 1;

    // skip verifying the image server's TLS certificate
    bool insecureSkipVerify = 2;

    // use HTTP instead of HTTPS
    bool plainHttp = 3;
}

// how to deploy the filter
message DeploymentSpec {
    oneof deploymentType {
        // Deploy to Istio
        IstioDeploymentSpec istio = 2;
    }
}

// how to deploy to Istio
message IstioDeploymentSpec {
    // the kind of workload to deploy the filter to
    // can either be Deployment or DaemonSet
    string kind = 1;

    // the name of the workload to deploy the filter to
    // the workload must live in the same namespace as the FilterDeployment
    // if empty, the filter will be deployed to all workloads in the namespace
    string name = 2;
}

// the current status of the deployment
message FilterDeploymentStatus {

    // the observed generation of the FilterDeployment
    int64 observedGeneration = 1;


    // for each workload, was the deployment successful?
    map<string, WorkloadStatus> workloads = 2;

    // a human-readable string explaining the error, if any
    string reason = 3;
}


message WorkloadStatus {
    // the state of the filter deployment
    enum State {
        Pending = 0;
        Succeeded = 1;
        Failed = 2;
    }
    State state = 1;

    // a human-readable string explaining the error, if any
    string reason = 2;
}