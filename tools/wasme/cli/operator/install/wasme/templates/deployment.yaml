# Code generated by skv2. DO NOT EDIT.

---

# Deployment manifest for wasme-operator
{{- $wasmeOperator := $.Values.wasmeOperator}}
{{- $wasmeOperatorImage := $wasmeOperator.image }}

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: wasme-operator
  name: wasme-operator
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: wasme-operator
  template:
    metadata:
      labels:
        app: wasme-operator
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: wasme-operator
      containers:
      - image: {{ $wasmeOperatorImage.registry }}/{{ $wasmeOperatorImage.repository }}:{{ $wasmeOperatorImage.tag }}
        args:
        - operator
        - --log-level=debug
{{- if $wasmeOperator.env }}
        env:
{{ toYaml $wasmeOperator.env | indent 10 }}
{{- end }}
        imagePullPolicy: {{ $wasmeOperatorImage.pullPolicy }}
        name: wasme-operator
{{- if $wasmeOperator.resources }}
        resources:
{{ toYaml $wasmeOperator.resources | indent 10}}
{{- else}}
        resources:
          requests:
            cpu: 500m
            memory: 256Mi
{{- end}}
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      {{- if $wasmeOperatorImage.pullSecret }}
      imagePullSecrets:
        - name: {{ $wasmeOperatorImage.pullSecret }}
      {{- end}}


---

# Service account for wasme-operator

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: wasme-operator
  name: wasme-operator
  namespace: {{ $.Release.Namespace }}




---

# DaemonSet manifest for wasme-cache
{{- $wasmeCache := $.Values.wasmeCache}}
{{- $wasmeCacheImage := $wasmeCache.image }}

apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: wasme-cache
  name: wasme-cache
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: wasme-cache
  template:
    metadata:
      labels:
        app: wasme-cache
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: wasme-cache
      volumes:
      - hostPath:
          path: /var/local/lib/wasme-cache
          type: DirectoryOrCreate
        name: cache-dir
      - configMap:
          items:
          - key: images
            path: images.txt
          name: wasme-cache
        name: config
      containers:
      - image: {{ $wasmeCacheImage.registry }}/{{ $wasmeCacheImage.repository }}:{{ $wasmeCacheImage.tag }}
        args:
        - cache
        - --directory
        - /var/local/lib/wasme-cache
        - --ref-file
        - /etc/wasme-cache/images.txt
        - --cache-ns
        - '{{ .Release.Namespace }}'
{{- if $wasmeCache.env }}
        env:
{{ toYaml $wasmeCache.env | indent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /var/local/lib/wasme-cache
          name: cache-dir
        - mountPath: /etc/wasme-cache
          name: config
        imagePullPolicy: {{ $wasmeCacheImage.pullPolicy }}
        name: wasme-cache
{{- if $wasmeCache.resources }}
        resources:
{{ toYaml $wasmeCache.resources | indent 10}}
{{- else}}
        resources:
          requests:
            cpu: 500m
            memory: 256Mi
{{- end}}
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      {{- if $wasmeCacheImage.pullSecret }}
      imagePullSecrets:
        - name: {{ $wasmeCacheImage.pullSecret }}
      {{- end}}


---

# Service account for wasme-cache

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: wasme-cache
  name: wasme-cache
  namespace: {{ $.Release.Namespace }}





