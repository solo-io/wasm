// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	config "github.com/solo-io/wasme/pkg/config"

	mock "github.com/stretchr/testify/mock"

	pull "github.com/solo-io/wasme/pkg/pull"

	v1 "github.com/opencontainers/image-spec/specs-go/v1"
)

// ImagePuller is an autogenerated mock type for the ImagePuller type
type ImagePuller struct {
	mock.Mock
}

// Pull provides a mock function with given fields: ctx, ref
func (_m *ImagePuller) Pull(ctx context.Context, ref string) ([]v1.Descriptor, error) {
	ret := _m.Called(ctx, ref)

	var r0 []v1.Descriptor
	if rf, ok := ret.Get(0).(func(context.Context, string) []v1.Descriptor); ok {
		r0 = rf(ctx, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Descriptor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PullCodeDescriptor provides a mock function with given fields: ctx, ref
func (_m *ImagePuller) PullCodeDescriptor(ctx context.Context, ref string) (v1.Descriptor, error) {
	ret := _m.Called(ctx, ref)

	var r0 v1.Descriptor
	if rf, ok := ret.Get(0).(func(context.Context, string) v1.Descriptor); ok {
		r0 = rf(ctx, ref)
	} else {
		r0 = ret.Get(0).(v1.Descriptor)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PullConfigFile provides a mock function with given fields: ctx, ref
func (_m *ImagePuller) PullConfigFile(ctx context.Context, ref string) (*config.Config, error) {
	ret := _m.Called(ctx, ref)

	var r0 *config.Config
	if rf, ok := ret.Get(0).(func(context.Context, string) *config.Config); ok {
		r0 = rf(ctx, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PullFilter provides a mock function with given fields: ctx, image
func (_m *ImagePuller) PullFilter(ctx context.Context, image string) (pull.Filter, error) {
	ret := _m.Called(ctx, image)

	var r0 pull.Filter
	if rf, ok := ret.Get(0).(func(context.Context, string) pull.Filter); ok {
		r0 = rf(ctx, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pull.Filter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
