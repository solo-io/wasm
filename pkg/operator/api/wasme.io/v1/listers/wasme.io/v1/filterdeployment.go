/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/solo-io/wasme/pkg/operator/api/wasme.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FilterDeploymentLister helps list FilterDeployments.
type FilterDeploymentLister interface {
	// List lists all FilterDeployments in the indexer.
	List(selector labels.Selector) (ret []*v1.FilterDeployment, err error)
	// FilterDeployments returns an object that can list and get FilterDeployments.
	FilterDeployments(namespace string) FilterDeploymentNamespaceLister
	FilterDeploymentListerExpansion
}

// filterDeploymentLister implements the FilterDeploymentLister interface.
type filterDeploymentLister struct {
	indexer cache.Indexer
}

// NewFilterDeploymentLister returns a new FilterDeploymentLister.
func NewFilterDeploymentLister(indexer cache.Indexer) FilterDeploymentLister {
	return &filterDeploymentLister{indexer: indexer}
}

// List lists all FilterDeployments in the indexer.
func (s *filterDeploymentLister) List(selector labels.Selector) (ret []*v1.FilterDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FilterDeployment))
	})
	return ret, err
}

// FilterDeployments returns an object that can list and get FilterDeployments.
func (s *filterDeploymentLister) FilterDeployments(namespace string) FilterDeploymentNamespaceLister {
	return filterDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FilterDeploymentNamespaceLister helps list and get FilterDeployments.
type FilterDeploymentNamespaceLister interface {
	// List lists all FilterDeployments in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.FilterDeployment, err error)
	// Get retrieves the FilterDeployment from the indexer for a given namespace and name.
	Get(name string) (*v1.FilterDeployment, error)
	FilterDeploymentNamespaceListerExpansion
}

// filterDeploymentNamespaceLister implements the FilterDeploymentNamespaceLister
// interface.
type filterDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FilterDeployments in the indexer for a given namespace.
func (s filterDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1.FilterDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FilterDeployment))
	})
	return ret, err
}

// Get retrieves the FilterDeployment from the indexer for a given namespace and name.
func (s filterDeploymentNamespaceLister) Get(name string) (*v1.FilterDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("filterdeployment"), name)
	}
	return obj.(*v1.FilterDeployment), nil
}
