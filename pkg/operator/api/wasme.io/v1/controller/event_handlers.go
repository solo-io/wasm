// Code generated by skv2. DO NOT EDIT.

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	wasme_io_v1 "github.com/solo-io/wasme/pkg/operator/api/wasme.io/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the FilterDeployment Resource
// DEPRECATED: Prefer reconciler pattern.
type FilterDeploymentEventHandler interface {
	CreateFilterDeployment(obj *wasme_io_v1.FilterDeployment) error
	UpdateFilterDeployment(old, new *wasme_io_v1.FilterDeployment) error
	DeleteFilterDeployment(obj *wasme_io_v1.FilterDeployment) error
	GenericFilterDeployment(obj *wasme_io_v1.FilterDeployment) error
}

type FilterDeploymentEventHandlerFuncs struct {
	OnCreate  func(obj *wasme_io_v1.FilterDeployment) error
	OnUpdate  func(old, new *wasme_io_v1.FilterDeployment) error
	OnDelete  func(obj *wasme_io_v1.FilterDeployment) error
	OnGeneric func(obj *wasme_io_v1.FilterDeployment) error
}

func (f *FilterDeploymentEventHandlerFuncs) CreateFilterDeployment(obj *wasme_io_v1.FilterDeployment) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *FilterDeploymentEventHandlerFuncs) DeleteFilterDeployment(obj *wasme_io_v1.FilterDeployment) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *FilterDeploymentEventHandlerFuncs) UpdateFilterDeployment(objOld, objNew *wasme_io_v1.FilterDeployment) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *FilterDeploymentEventHandlerFuncs) GenericFilterDeployment(obj *wasme_io_v1.FilterDeployment) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type FilterDeploymentEventWatcher interface {
	AddEventHandler(ctx context.Context, h FilterDeploymentEventHandler, predicates ...predicate.Predicate) error
}

type filterDeploymentEventWatcher struct {
	watcher events.EventWatcher
}

func NewFilterDeploymentEventWatcher(name string, mgr manager.Manager) FilterDeploymentEventWatcher {
	return &filterDeploymentEventWatcher{
		watcher: events.NewWatcher(name, mgr, &wasme_io_v1.FilterDeployment{}),
	}
}

func (c *filterDeploymentEventWatcher) AddEventHandler(ctx context.Context, h FilterDeploymentEventHandler, predicates ...predicate.Predicate) error {
	handler := genericFilterDeploymentHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericFilterDeploymentHandler implements a generic events.EventHandler
type genericFilterDeploymentHandler struct {
	handler FilterDeploymentEventHandler
}

func (h genericFilterDeploymentHandler) Create(object runtime.Object) error {
	obj, ok := object.(*wasme_io_v1.FilterDeployment)
	if !ok {
		return errors.Errorf("internal error: FilterDeployment handler received event for %T", object)
	}
	return h.handler.CreateFilterDeployment(obj)
}

func (h genericFilterDeploymentHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*wasme_io_v1.FilterDeployment)
	if !ok {
		return errors.Errorf("internal error: FilterDeployment handler received event for %T", object)
	}
	return h.handler.DeleteFilterDeployment(obj)
}

func (h genericFilterDeploymentHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*wasme_io_v1.FilterDeployment)
	if !ok {
		return errors.Errorf("internal error: FilterDeployment handler received event for %T", old)
	}
	objNew, ok := new.(*wasme_io_v1.FilterDeployment)
	if !ok {
		return errors.Errorf("internal error: FilterDeployment handler received event for %T", new)
	}
	return h.handler.UpdateFilterDeployment(objOld, objNew)
}

func (h genericFilterDeploymentHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*wasme_io_v1.FilterDeployment)
	if !ok {
		return errors.Errorf("internal error: FilterDeployment handler received event for %T", object)
	}
	return h.handler.GenericFilterDeployment(obj)
}
